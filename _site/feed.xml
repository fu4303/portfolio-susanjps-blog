<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="http://susanjsp.com/feed.xml" rel="self" type="application/atom+xml" /><link href="http://susanjsp.com/" rel="alternate" type="text/html" /><updated>2021-02-04T00:29:25+10:00</updated><id>http://susanjsp.com/feed.xml</id><title type="html">Susan Pan</title><subtitle>I created this blog to document my career journey from Pharmacist to Software Engineering. I hope to solidify my learning and to also develop my written communication skills through writing technical posts about web development.</subtitle><author><name>Susan Pan</name></author><entry><title type="html">Using the Reduce function in JavaScript</title><link href="http://susanjsp.com/%F0%9F%94%85%20javascript/2021/01/27/why-reduce-method-so-hard.html" rel="alternate" type="text/html" title="Using the Reduce function in JavaScript" /><published>2021-01-27T00:00:00+10:00</published><updated>2021-01-27T00:00:00+10:00</updated><id>http://susanjsp.com/%F0%9F%94%85%20javascript/2021/01/27/why-reduce-method-so-hard</id><content type="html" xml:base="http://susanjsp.com/%F0%9F%94%85%20javascript/2021/01/27/why-reduce-method-so-hard.html">&lt;p&gt;As I’m doing a deep dive into JavaScript, I thought I’d come here and share some of the knowledge I’ve gained and hopefully make things a little easier  &lt;!--break--&gt; for some of you out there. Today, we’re tackling… the Reduce method!&lt;/p&gt;

&lt;p&gt;Spending months learning ruby is pretty good on the scale of things - writing variables, functions and even programs are pretty intuitive and readable. However, jumping from ruby to javascript was a steep learning curve. Whether it was the syntax, or the shift in the type of programming that’s being done, it felt like I was taking a deep dive into the ocean without knowing how to swim.&lt;/p&gt;

&lt;p&gt;One function in particular haunted me - the reduce function. When browsing StackOverflow and other JS blogs for solutions, the reduce function kept rearing it’s ugly head. Every time I saw it, I would try to read about it but for some reason I just couldn’t wrap my head around it.&lt;/p&gt;

&lt;p&gt;Today, we’re going to learn how to use the reduce function and master it!! There’s no other choice, so kick your text editor of choice into gear and let’s get it! By the end of this tutorial, we’re going to love this function.&lt;/p&gt;

&lt;p&gt;The array.reduce() function is one that can be called on an array object. You call it on an array, and it produces a single value as the output (a single number, a single array or a single object, etc).&lt;/p&gt;

&lt;p&gt;There are 2 separate arguments that we need to specify.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The reducer function&lt;/li&gt;
  &lt;li&gt;The start value (optional, starts at first value in array if not specificed);&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reducer_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The reducer_function must have the first 2 arguments, with 2 extra optional arguments.&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;reducer_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accumulator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// This is what the skeleton of the function looks like, with all the optional arguments&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reducer_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accumulator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Accumulator -&amp;gt; the running total of the function. For example, if we are looking to sum all of the numbers in the array, the accumulator stores the total sum after each iteration.&lt;/li&gt;
  &lt;li&gt;CurrentValue -&amp;gt; the current element being processed in the array&lt;/li&gt;
  &lt;li&gt;Index -&amp;gt; the index of the current element being processed&lt;/li&gt;
  &lt;li&gt;Array -&amp;gt; the array that reduce() was called upon&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sum-all-elements-of-an-array&quot;&gt;Sum all elements of an array&lt;/h2&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// array.reduce(function(accumulator, currentValue, index, array), start_value);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 1. Substitute argument names to names specific to our problem (create the skeleton)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 2. Think about how to execute reducer function. As we are summing the numbers, we can create code as follows&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 3. Remember to put return - without it 'sum' won't be applying the code from the block&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 4. start_value is optional - when omitted, it automatically starts at 0, so we can remove it.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sumArr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sumArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 50&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I hope this has helped to clear up how to use this function. Hopefully now you’ll just need a few more practise exercises on it, and you’ll get it!&lt;/p&gt;</content><author><name>Susan Pan</name></author><category term="🔅 JavaScript" /><category term="javascript" /><summary type="html">As I’m doing a deep dive into JavaScript, I thought I’d come here and share some of the knowledge I’ve gained and hopefully make things a little easier</summary></entry><entry><title type="html">Creating a website for our local commumity</title><link href="http://susanjsp.com/%F0%9F%92%BC%20side%20projects/2021/01/07/community-club-side-project.html" rel="alternate" type="text/html" title="Creating a website for our local commumity" /><published>2021-01-07T00:00:00+10:00</published><updated>2021-01-07T00:00:00+10:00</updated><id>http://susanjsp.com/%F0%9F%92%BC%20side%20projects/2021/01/07/community-club-side-project</id><content type="html" xml:base="http://susanjsp.com/%F0%9F%92%BC%20side%20projects/2021/01/07/community-club-side-project.html">&lt;p&gt;I had a chat with my friend recently about the state of badminton websites in our local area. This project is a result of that conversation. &lt;!--break--&gt;&lt;/p&gt;

&lt;p&gt;One of my friends has been playing badminton for a few years now. Whenever he wanted to play, he would have to scour the local facebook pages and websites to find out if there were any sessions available that night. Not only that, there was no information on whether memberships were required, or if there were any services at the location - ie. eftpos only or on-site parking. This is where I got the idea of creating a social badminton website, used to aggregrate information about clubs and sessions currently in Queensland (Brisbane only for now).&lt;/p&gt;

&lt;p&gt;Originally, I wanted to wait and learn some javascript frameworks to create this app, but since I was so excited about the idea, I just powered on ahead. To my surprise, there was a lot of basic rails information that I’d already forgotten but with the help of some pre-made templates and the rails docs my project was on it’s way!&lt;/p&gt;

&lt;h3 id=&quot;what-i-did-today&quot;&gt;What I did today&lt;/h3&gt;

&lt;p&gt;Today I worked on visualising the relational database by drawing the columns and connections.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, I created my rails app with the help of a template which already includes the devise, font-awesome and simple form gems pre-installled&lt;/li&gt;
  &lt;li&gt;Created my database tables &amp;amp; schema&lt;/li&gt;
  &lt;li&gt;Created a basic seedfile to test the relationships between the objects and ensure the models had the correct validations included&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is some of the information I came across today:&lt;/p&gt;

&lt;h3 id=&quot;some-useful-rails-commands&quot;&gt;Some useful rails commands&lt;/h3&gt;
&lt;p&gt;I’ll be using a house object as an example (where ‘user’ is the owner)&lt;/p&gt;
&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;House&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:references&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;With the references data_type, rails will automatically create a column called user_id and generate the foreign keys in the schema&lt;/li&gt;
  &lt;li&gt;model name is singular and capitalized&lt;/li&gt;
  &lt;li&gt;if not datatype is included, defaults to ‘:string’&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;migration&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AddOccupantsToHouse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;occupants&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:integer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Adding ‘occupants’ column to the House model, don’t forget to specify data-type&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destroy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;migration&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RemoveOccupantsFromHouse&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destroy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;House&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;occupants&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:integer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Both commands remove the ‘occupants’ column from the House model&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;datetime-data-type&quot;&gt;DateTime data-type&lt;/h3&gt;
&lt;p&gt;Rails includes a data-type called ‘DateTime’, which can be used when creating a column in a relational database.&lt;/p&gt;

&lt;p&gt;To create seed data for a DateTime data-type, I used the following syntax:&lt;/p&gt;
&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strptime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2020&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HH&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:MM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;if using ‘strptime’ method you can rearrange the format and update the date to follow the new format&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Read more about DateTime in the official Rails Documentation &lt;a href=&quot;https://api.rubyonrails.org/classes/DateTime.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For tomorrow:&lt;/strong&gt; my task will to be generate the controllers and corresponding views, maybe set up cloudinary and design the show pages for clubs and locations&lt;/p&gt;

&lt;p&gt;Signing off for today, thanks for reading!&lt;/p&gt;</content><author><name>Susan Pan</name></author><category term="💼 side projects" /><category term="badminton" /><category term="app," /><category term="rails" /><summary type="html">I had a chat with my friend recently about the state of badminton websites in our local area. This project is a result of that conversation.</summary></entry><entry><title type="html">Welcome 2021!</title><link href="http://susanjsp.com/%F0%9F%92%81%F0%9F%8F%BB%E2%80%8D%E2%99%80%EF%B8%8F%20personal/2021/01/02/happy-new-year-2021.html" rel="alternate" type="text/html" title="Welcome 2021!" /><published>2021-01-02T00:00:00+10:00</published><updated>2021-01-02T00:00:00+10:00</updated><id>http://susanjsp.com/%F0%9F%92%81%F0%9F%8F%BB%E2%80%8D%E2%99%80%EF%B8%8F%20personal/2021/01/02/happy-new-year-2021</id><content type="html" xml:base="http://susanjsp.com/%F0%9F%92%81%F0%9F%8F%BB%E2%80%8D%E2%99%80%EF%B8%8F%20personal/2021/01/02/happy-new-year-2021.html">&lt;p&gt;Happy new year!! It’s finally 2021, and it could not have come any sooner. I think I can confidently speak for all of us when I say 2020 was a bit of a sht-show. &lt;!--break--&gt;&lt;/p&gt;

&lt;p&gt;I might start off with a mini retrospective of 2020, but I’ll try not to dwell. Collectively, 2020 was a really horrible year, but there were a few small wins that I can celebrate and I hope you’ll take some time to think about yours as well.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;My direct family and extended family have all stayed healthy during the year&lt;/li&gt;
  &lt;li&gt;I was able to be there for and provide emotional support to some of my friends who were going through some difficult times&lt;/li&gt;
  &lt;li&gt;I made the decision to pursue a career in software development and am incredibly lucky to have been able to attend a full-time bootcamp to upskill&lt;/li&gt;
  &lt;li&gt;I met such supportive teachers and fellow students at my bootcamp, but unfortunately still haven’t been able to meet them in person as I’m in a different city :(&lt;/li&gt;
  &lt;li&gt;Was able to finally attend yoga classes and have been practising pretty consistently after wanting to for the longest time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It could just be the holiday season, but I’ve been so thankful for being able to see and have genuine, in-person connections with my close friends and family. To anyone who is still waiting to see their loved ones, hold on a little longer! It will get better.&lt;/p&gt;

&lt;p&gt;Let’s put these bittersweet memories of 2020 to rest, and welcome the new year. Here’s to 2021 - the year that we’ll all be cultivating the energy to accomplish great things. To everyone who is reading, studying, hustling or building projects to become a better developer, this year will bring great success. Whether you’re looking to create a start-up, to finally land that first developer role or for those of you who are taking a break to extinguish the possibility of burnout, I’m rooting for you!&lt;/p&gt;

&lt;p&gt;We’re ready for you, 2021. Bring it on!&lt;/p&gt;</content><author><name>Susan Pan</name></author><category term="💁🏻‍♀️ personal" /><category term="personal" /><summary type="html">Happy new year!! It’s finally 2021, and it could not have come any sooner. I think I can confidently speak for all of us when I say 2020 was a bit of a sht-show.</summary></entry><entry><title type="html">My first blog post!</title><link href="http://susanjsp.com/%F0%9F%9A%80%20personal%20development/2020/12/30/my-first-post.html" rel="alternate" type="text/html" title="My first blog post!" /><published>2020-12-30T00:00:00+10:00</published><updated>2020-12-30T00:00:00+10:00</updated><id>http://susanjsp.com/%F0%9F%9A%80%20personal%20development/2020/12/30/my-first-post</id><content type="html" xml:base="http://susanjsp.com/%F0%9F%9A%80%20personal%20development/2020/12/30/my-first-post.html">&lt;p&gt;Welcome to my blog! I’ve created this so that I have my own corner of the internet to write about all the things I’ve learnt about tech. &lt;!--break--&gt;
I’m hoping to use this platform as a way for me to really bring home the core software engineering concepts while also practising my written communication.&lt;/p&gt;

&lt;p&gt;Most of the posts I create will be to document my progress on side-projects, my career journey or technical posts for new concepts that I come across. Although I’m only at the very beginning of my tech career, I hope there will be some things that you can learn from my posts!&lt;/p&gt;

&lt;p&gt;Thanks for taking the time to read this! Feel free to stay and have a little poke around, but don’t forget to take a break and have a quick stretch before you continue :)&lt;/p&gt;</content><author><name>Susan Pan</name></author><category term="🚀 personal development" /><category term="personal" /><category term="career" /><summary type="html">Welcome to my blog! I’ve created this so that I have my own corner of the internet to write about all the things I’ve learnt about tech.</summary></entry></feed>